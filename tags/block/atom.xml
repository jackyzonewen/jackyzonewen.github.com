<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Tag: block | 挡不住的君文]]></title>
  <link href="http://jackyzonewen.github.io/tags/block/atom.xml" rel="self"/>
  <link href="http://jackyzonewen.github.io/"/>
  <updated>2014-12-31T12:41:45+08:00</updated>
  <id>http://jackyzonewen.github.io/</id>
  <author>
    <name><![CDATA[jackyzonewen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Objective-C中Block的使用]]></title>
    <link href="http://jackyzonewen.github.io/blog/2014/04/03/objective-czhong-blockde-shi-yong/"/>
    <updated>2014-04-03T17:20:00+08:00</updated>
    <id>http://jackyzonewen.github.io/blog/2014/04/03/objective-czhong-blockde-shi-yong</id>
    <content type="html"><![CDATA[<blockquote><p>看了几篇关于block的不错的博文，记录下来，方便查阅。</p></blockquote>

<h4>Block简介</h4>

<blockquote><p>Block作为C语言的扩展，并不是高新技术，和其他语言的闭包或lambda表达式是一回事。需要注意的是由于Objective-C在iOS中不支持GC机制，使用Block必须自己管理内存，而内存管理正是使用Block坑最多的地方，错误的内存管理 要么导致retain cycle内存泄漏,要么内存被提前释放导致crash。 Block的使用很像函数指针，不过与函数最大的不同是：Block可以访问函数以外、词法作用域以内的外部变量的值，函数不可以；另外一个不同：Block是一个“仿”对象，可以使用自动释放池管理管理内存。Object-C中的对象都是继承自NSObject对象，NSObject对象的实现中有一个isa指针，是一个objc_class指针，指向Class的property；block对象中也有一个isa指针，指向的是_NSConcrete*Block对象，用于指明这个block的类型。</p></blockquote>

<hr />

<h4>Block语法</h4>

<p>一图一世界：</p>

<p><img src="http://beyondvincent.com/wp-content/uploads/2013/07/blocks_2x.png" alt="" /></p>

<p>声明block变量:</p>

<p>As a local variable:</p>

<pre><code>returnType (^blockName)(parameterTypes) = ^returnType(parameters) {...};
</code></pre>

<p>As a property:</p>

<pre><code>@property (nonatomic, copy) returnType (^blockName)(parameterTypes);
</code></pre>

<p>As a method parameter:</p>

<pre><code>- (void)someMethodThatTakesABlock:(returnType (^)(parameterTypes))blockName;
</code></pre>

<p>As an argument to a method call:</p>

<pre><code>[someObject someMethodThatTakesABlock: ^returnType (parameters) {...}];
</code></pre>

<p>As a typedef:</p>

<pre><code>typedef returnType (^TypeName)(parameterTypes);
TypeName blockName = ^returnType(parameters) {...};
</code></pre>

<hr />

<h4>Block数据格式</h4>

<p>如下图:</p>

<p><img src="http://www.galloway.me.uk/media/images/2013-05-26-a-look-inside-blocks-episode-3-block-copy/block_layout.png" alt="" /></p>

<pre><code>struct Block_descriptor {
    unsigned long int reserved;
    unsigned long int size;
    void (*copy)(void *dst, void *src);
    void (*dispose)(void *);
};

struct Block_layout {
    void *isa;
    int flags;
    int reserved;
    void (*invoke)(void *, ...);
    struct Block_descriptor *descriptor;
    /* Imported variables. */
};
</code></pre>

<p>一个block实例实际上由6部分构成：</p>

<ul>
<li>isa指针，所有对象都有该指针，用于实现对象相关的功能。</li>
<li>flags，用于按bit位表示一些block的附加信息，本文后面介绍block copy的实现代码可以看到对该</li>
<li>变量的使用。</li>
<li>reserved，保留变量。</li>
<li>invoke，函数指针，指向具体的block实现的函数调用地址。</li>
<li>descriptor， 表示该block的附加描述信息，主要是size大小，以及copy和dispose函数的指针。</li>
<li>variables，capture过来的变量，block能够访问它外部的局部变量，就是因为将这些变量（或变量的地址）复制到了结构体中。</li>
</ul>


<hr />

<h4>Block类型</h4>

<p>1._NSConcreteGlobalBlock 保存在代码段(类似于函数)，不会访问任何外部变量。</p>

<pre><code>{
    //create a NSGlobalBlock
    float (^sum)(float, float) = ^(float a, float b){
        return a + b;
    };
    NSLog(@"block is %@", sum); //block is &lt;__NSGlobalBlock__: 0x&gt;
}
</code></pre>

<p>2._NSConcreteStackBlock 保存在栈中的block，当函数返回时会被销毁。</p>

<pre><code>{
    NSArray *testArr = @[@"1", @"2"];

    NSLog(@"block is %@", ^{

        NSLog(@"test Arr :%@", testArr);
    });
    // block is &lt;__NSStackBlock__: 0x&gt;
    // 打印可看出block是一个 NSStackBlock, 即在栈上, 当函数返回时block将无效
}
</code></pre>

<p>3.<em>NSConcreteMallocBlock 保存在堆中的block，当引用计数为0时会被销毁，对</em>NSConcreteStackBlock进行copy操作。</p>

<pre><code>{
    NSArray *testArr = @[@"1", @"2"];   

    void (^TestBlock)(void) = ^{

        NSLog(@"testArr :%@", testArr);
    }; 
    NSLog(@"block is %@", TestBlock);
    // block is &lt;__NSMallocBlock__: 0x&gt;
    // 上面这句在非arc中打印是 NSStackBlock, 但是在arc中就是NSMallocBlock
    // 区别就是ARC下strong指针过了一趟手，block被copy到堆上了
}
</code></pre>

<p>4.<em>NSConcreteWeakBlockVariable<br/>
5.</em>NSConcreteAutoBlock<br/>
6._NSConcreteFinalizingBlock<br/>
后三种用于GC，不做讨论。</p>

<hr />

<h4>Block的生命周期</h4>

<p>Block的isa指针指向的是_NSConcreteStackBlock，这个prototype重新定义了一下咱们熟悉(NSObject所定义的)的retain/copy/release等函数。</p>

<p><strong>非ARC环境下:</strong></p>

<p>测试代码:</p>

<pre><code>NSLog(@"_NSConcreteStackBlock %@", [_NSConcreteStackBlock class]); // _NSConcreteStackBlock __NSStackBlock__

__block int val = 10;
blk stackBlock = ^{NSLog(@"val = %d", ++val);};
NSLog(@"stackBlock: %@", stackBlock); // stackBlock: &lt;__NSStackBlock__: 0xbfffdb28&gt;

tempBlock = [stackBlock copy];
NSLog(@"tempBlock: %@", tempBlock); // tempBlock: &lt;__NSMallocBlock__: 0x756bf20&gt;

// 结果: 经过copy之后，对象的类型从__NSStackBlock__变为了__NSMallocBlock__
</code></pre>

<p>得出的结论:</p>

<p><img src="/images/mm.jpeg"></p>

<ul>
<li><p>NSGlobalBlock类型(理解为静态block)：retain、copy、release都不会影响block的生命周期。</p></li>
<li><p>当一个block对象在堆上了，生命周期和普通的NSObject对象的管理一样，copy和release一一对应，不然会存在系统级别的内存泄露，在Instruments里跟不到问题触发点。</p></li>
<li><p>NSMallocBlock支持retain、release，虽然retainCount始终是1，但内存管理器中仍然会增加、减少计数。copy之后不会生成新的对象，只是增加了一次引用，类似NSObject的retain操作，多个block指针指向的是heap中的同一块内存，<a href="http://www.cnblogs.com/studentdeng/archive/2012/02/03/2336863.html">图解</a>；</p></li>
<li><p>NSStackBlock：NSStackBlock在函数返回后，Block内存将被回收，即使retain也没用，容易犯的错误是[[mutableAarry addObject:stackBlock]，在函数出栈后，从数组中取到的stackBlock已经被回收，变成了野指针。正确的做法是先将stackBlock copy到堆上，然后加入数组：[mutableAarry addObject:[[stackBlock copy] autorelease]]。如果要长期持有block对象请把她移到堆上。</p></li>
<li><p>在向外传递block的时候参考类似NSObject的规则，一定要传递一个autorelease的__NSMallocBlock__对象，类似于return [[stackBlock copy] autorelease];</p></li>
</ul>


<p><strong>ARC环境下：</strong></p>

<p>测试代码:</p>

<pre><code>__block int val = 10;
__strong blk strongPointerBlock = ^{NSLog(@"val = %d", ++val);};
NSLog(@"strongPointerBlock: %@", strongPointerBlock); 
// strongPointerBlock: &lt;__NSMallocBlock__: 0x7625120&gt; strong指针指向的block已经放到堆上

__weak blk weakPointerBlock = ^{NSLog(@"val = %d", ++val);};
NSLog(@"weakPointerBlock: %@", weakPointerBlock); 
// weakPointerBlock: &lt;__NSStackBlock__: 0xbfffdb30&gt; weak指针指向的block还在栈上

NSLog(@"mallocBlock: %@", [weakPointerBlock copy]); 
// mallocBlock: &lt;__NSMallocBlock__: 0x714ce60&gt; copy会将block从栈移动到堆上

NSLog(@"test %@", ^{NSLog(@"val = %d", ++val);}); 
// test &lt;__NSStackBlock__: 0xbfffdb18&gt; 匿名的block在栈上
</code></pre>

<p>得出的结论:</p>

<ul>
<li>只要block在strong指针底下过一道都会放到堆上，变成NSMallocBlock类型。</li>
<li>匿名block和weak指针指向的block在栈上。</li>
<li>block做为函数返回参数时，block也会自动被移到堆上，所以无需非ARC的规则。</li>
<li>ARC下的注意事项，block指针过一下strong指针，他好，我也好。</li>
</ul>


<hr />

<h4>Block对外部变量的管理</h4>

<h5>1、基本类型变量</h5>

<p><strong>局部自动变量</strong>：Block<strong>定义</strong>时copy变量的值，在Block中作为常量使用，所以即使变量的值在Block外改变，也不影响在Block中的值(根本不是一个变量)。</p>

<pre><code>{
    int base = 100;
    long (^sum)(int, int) = ^ long (int a, int b) {

        return base + a + b;
    };

    base = 0;
    printf("%ld\n",sum(1,2));
    // 这里输出是103，而不是3, 因为块内base为拷贝的常量 100
}
</code></pre>

<p><strong>STATIC修饰符的全局变量</strong>:全局变量或静态变量在内存中的地址是固定的，Block在读取该变量值的时候是直接从其所在内存读出，获取到的是最新值，而不是在定义时copy的常量.</p>

<pre><code>{
    static int base = 100;
    long (^sum)(int, int) = ^ long (int a, int b) {
        base++;
        return base + a + b;
    };

    base = 0;
    printf("%ld\n",sum(1,2));
    // 这里输出是4，而不是103, 因为base被设置为了0
    printf("%d\n", base);
    // 这里输出1， 因为sum中将base++了
}
</code></pre>

<p><strong>__BLOCK修饰的变量</strong>:被__block修饰的变量称作Block变量，基本类型的Block变量等效于全局变量、或静态变量(同一个变量)，当存在NSMallocBlock类型的block和NSStackBlock类型的block同时引用__block变量，__block变量将会被移到heap中。</p>

<h5>2、对象</h5>

<p>block对于objc对象的内存管理较为复杂，这里要分static变量、global变量、local变量、block变量分析、还要分非arc和arc分析。</p>

<h6>2.1、非ARC中的对象</h6>

<pre><code>@interface MyClass : NSObject {
    NSObject* _instanceObj;
}
@end

@implementation MyClass

NSObject* __globalObj = nil;

- (id) init {
    if (self = [super init]) {
        _instanceObj = [[NSObject alloc] init];
    }
    return self;
}

- (void) test {
    static NSObject* __staticObj = nil;
    __globalObj = [[NSObject alloc] init];
    __staticObj = [[NSObject alloc] init];

    NSObject* localObj = [[NSObject alloc] init];
    __block NSObject* blockObj = [[NSObject alloc] init];

    typedef void (^MyBlock)(void) ;
    MyBlock aBlock = ^{
        NSLog(@"%@", __globalObj);
        NSLog(@"%@", __staticObj);
        NSLog(@"%@", _instanceObj);
        NSLog(@"%@", localObj);
        NSLog(@"%@", blockObj);
    };
    aBlock = [[aBlock copy] autorelease];
    aBlock();

    NSLog(@"%d", [__globalObj retainCount]);
    NSLog(@"%d", [__staticObj retainCount]);
    NSLog(@"%d", [_instanceObj retainCount]);
    NSLog(@"%d", [localObj retainCount]);
    NSLog(@"%d", [blockObj retainCount]);
}
@end

int main(int argc, char *argv[]) {
    @autoreleasepool {
        MyClass* obj = [[[MyClass alloc] init] autorelease];
        [obj test];
        return 0;
    }
}

// 执行结果:1 1 1 2 1
</code></pre>

<p>得出的结论：</p>

<ul>
<li><strong>globalObj和</strong>staticObj在内存中的位置是确定的，所以Block copy时不会retain对象。</li>
<li><em>instanceObj在Block copy时也没有直接retain </em>instanceObj对象本身，但会retain self。所以在Block中可以直接读写_instanceObj变量。</li>
<li>localObj在Block copy时，系统自动retain对象，增加其引用计数。</li>
<li>blockObj在Block copy时也不会retain。</li>
</ul>


<h6>2.2、ARC中的对象</h6>

<p>由于arc中没有retain，retainCount的概念。只有强引用和弱引用的概念。当一个变量没有__strong的指针指向它时，就会被系统释放。因此我们可以通过下面的代码来测试。</p>

<pre><code>NSString *__globalString = nil;

- (void)testGlobalObj
{
    __globalString = @"1";
    void (^TestBlock)(void) = ^{

        NSLog(@"string is :%@", __globalString); 
    };

    __globalString = nil;

    TestBlock(); // 结果：string is null
}

- (void)testStaticObj
{
    static NSString *__staticString = nil;
    __staticString = @"1";

    printf("static address: %p\n", &amp;__staticString);    //static address: 0x6a8c

    void (^TestBlock)(void) = ^{

        printf("static address: %p\n", &amp;__staticString); //static address: 0x6a8c

        NSLog(@"string is : %@", __staticString); //string is null
    };

    __staticString = nil;

    TestBlock();
}

- (void)testLocalObj
{
    NSString *__localString = nil;
    __localString = @"1";

    printf("local address: %p\n", &amp;__localString); //local address: 0xbfffd9c0

    void (^TestBlock)(void) = ^{

        printf("local address: %p\n", &amp;__localString); //local address: 0x71723e4

        NSLog(@"string is : %@", __localString); //string is : 1
    };

    __localString = nil;

    TestBlock();
}

- (void)testBlockObj
{
    __block NSString *_blockString = @"1";

    void (^TestBlock)(void) = ^{

        NSLog(@"string is : %@", _blockString); // string is null
    };

    _blockString = nil;

    TestBlock();
}

- (void)testWeakObj
{
    NSString *__localString = @"1";

    __weak NSString *weakString = __localString;

    printf("weak address: %p\n", &amp;weakString);  //weak address: 0xbfffd9c4
    printf("weak str address: %p\n", weakString); //weak str address: 0x684c

    void (^TestBlock)(void) = ^{

        printf("weak address: %p\n", &amp;weakString); //weak address: 0x7144324
        printf("weak str address: %p\n", weakString); //weak str address: 0x684c

        NSLog(@"string is : %@", weakString); //string is :1
    };

    __localString = nil;

    TestBlock();
}
</code></pre>

<p>得出的结论：</p>

<ul>
<li>只有在使用local变量时，block会复制指针，且强引用指针指向的对象一次。其它如全局变量、static变量、block变量等，block不会拷贝指针,只会强引用指针指向的对象一次。</li>
<li>即使标记了为<strong>weak或</strong>unsafe_unretained的local变量。block仍会强引用指针对象一次。（这个不太明白，因为这种写法可在后面避免循环引用的问题）</li>
<li>用NSString *<strong>localString = @”1″;分配的1是在静态存储区，所以在Block中打印printf(“weak str address: %p\n”, weakString);也会输出，测试对象的时候最好不要用NSString，应为它很特别，最好用UILabel，UIView等，</strong>block是复制了内容的；而__weak在block是空的</li>
</ul>


<hr />

<h4>Block引用不当导致的回环retain cycle</h4>

<p>block在拷贝到堆上的时候，会retain其引用的外部变量，那么如果block中如果引用了他的宿主对象，那很有可能引起循环引用，如：</p>

<pre><code>self.myblock = ^{

    [self doSomething];
};
</code></pre>

<p>ARC环境测试代码如下：</p>

<pre><code>- (void)dealloc
{

    NSLog(@"no cycle retain");
}

- (id)init
{
    self = [super init];
    if (self) {

#if TestCycleRetainCase1

        //会循环引用
        self.myblock = ^{

            [self doSomething];
        };
#elif TestCycleRetainCase2

        //会循环引用
        __block TestCycleRetain *weakSelf = self;
        self.myblock = ^{

            [weakSelf doSomething];
        };

#elif TestCycleRetainCase3

        //不会循环引用
        __weak TestCycleRetain *weakSelf = self;
        self.myblock = ^{

            [weakSelf doSomething];
        };

#elif TestCycleRetainCase4

        //不会循环引用
        __unsafe_unretained TestCycleRetain *weakSelf = self;
        self.myblock = ^{

            [weakSelf doSomething];
        };

#endif

        NSLog(@"myblock is %@", self.myblock);

    }
    return self;
}

- (void)doSomething
{
    NSLog(@"do Something");
}

int main(int argc, char *argv[]) {
    @autoreleasepool {
        TestCycleRetain* obj = [[TestCycleRetain alloc] init];
        obj = nil;
        return 0;
    }
}
</code></pre>

<p>在加了<strong>weak和</strong>unsafe_unretained的变量引入后，TestCycleRetain方法可以正常执行dealloc方法，而不转换和用<strong>block转换的变量都会引起循环引用。
因此防止循环引用的方法如下：
</strong>unsafe_unretained TestCycleRetain *weakSelf = self;</p>

<hr />

<h4>参考文章</h4>

<p><a href="http://www.cnblogs.com/biosli/archive/2013/05/29/iOS_Objective-C_Block.html">1、对Objective-C中Block的追探</a><br/>
<a href="http://www.cnbluebox.com/?p=255">2、block使用小结、在arc中使用block、如何防止循环引用</a><br/>
<a href="http://blog.devtang.com/blog/2013/07/28/a-look-inside-blocks/">3、谈Objective-C Block的实现</a><br/>
<a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-1/">4、A look inside blocks: Episode 1</a>  <a href="http://beyondvincent.com/blog/2013/07/09/99/">中文</a><br/>
<a href="http://www.galloway.me.uk/2012/10/a-look-inside-blocks-episode-2/">5、A look inside blocks: Episode 2</a>  <a href="http://beyondvincent.com/blog/2013/07/10/100/">中文</a><br/>
<a href="http://www.galloway.me.uk/2013/05/a-look-inside-blocks-episode-3-block-copy/">6、A look inside blocks: Episode 3 (Block_copy)</a>  <a href="http://beyondvincent.com/blog/2013/07/11/101/">中文</a> <br/>
<a href="http://blog.sina.com.cn/s/blog_7b9d64af0101c4sh.html">7、iOS Block -浅析</a><br/>
<a href="http://tanqisen.github.io/blog/2013/04/19/gcd-block-cycle-retain/">8、正确使用Block避免Cycle Retain和Crash</a><br/>
<a href="http://beyondvincent.com/blog/2013/07/08/98/">9、初识block</a><br/>
<a href="http://blog.ibireme.com/2013/11/27/objc-block/">10、objc中的block</a></p>
]]></content>
  </entry>
  
</feed>
