<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[挡不住的君文]]></title>
  <link href="http://jackyzonewen.github.io/atom.xml" rel="self"/>
  <link href="http://jackyzonewen.github.io/"/>
  <updated>2014-01-06T17:29:04+08:00</updated>
  <id>http://jackyzonewen.github.io/</id>
  <author>
    <name><![CDATA[jackyzonewen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[ruby rvm brew gem bundler梳理]]></title>
    <link href="http://jackyzonewen.github.io/blog/2014/01/06/ruby-rvm-brew-gem-bundlershu-li/"/>
    <updated>2014-01-06T16:07:00+08:00</updated>
    <id>http://jackyzonewen.github.io/blog/2014/01/06/ruby-rvm-brew-gem-bundlershu-li</id>
    <content type="html"><![CDATA[<p><strong>Ruby</strong>是日本人发明的一种脚本语言。</p>

<hr />

<p><strong><a href="https://github.com/Homebrew/homebrew/wiki">Brew</a></strong>是OS X上提供软件包的管理。Homebrew将软件包安装到单独的目录，然后符号链接到/usr/local 中，完全基于git和ruby。使用gem来安装你的gems，用brew来搞定他们的依赖包。</p>

<p>Mac OS X是基于Unix的操作系统，可以安装大部分为Unix/Linux开发的软件。如果只是以使用为目的，对每个软件都进行手工编译不是很方便，也不利于管理已安装的软件，于是出现了类似于Linux中APT、Yum等类似的软件包管理系统，Mac下比较著名的有MacPorts、Fink、Homebrew等。</p>

<p>MacPorts有个原则，对于软件包之间的依赖，都在MacPorts内部解决（/opt/local），无论系统本身是否包含了需要的库，都不会重用。这使得MacPorts过分的庞大臃肿，导致系统出现大量软件包的冗余，占用不小的磁盘空间，同时稍大型一点的软件编译时间都会难以忍受。</p>

<p>Homebrew恰恰相反，它尽可能地利用系统自带的各种库，使得软件包的编译时间大为缩短；同时由于几乎不会造成冗余，软件包的管理也清晰、灵活了许多。Homebrew的另一个特点是使用Ruby定义软件包安装配置(formula)，定制非常简单。</p>

<p>Fink暂不讨论。</p>

<p>首先确保你的系统满足如下要求：
 1. 基于Intel CPU
 2. 操作系统为Mac OS X 10.5 Leopard或更高版本
 3. 已安装版本管理工具Git（Mac OS X 10.7 Lion已经预安装
 4. 已安装Xcode开发工具1(Command Line Tools)
 5. 已安装Java Developer Update2</p>

<p>注1：Xcode 4.3中，命令行编译工具是可选安装，需要在Preferences > Downloads中激活。<br>
注2：可选，Homebrew本身不依赖于Java，只有部分软件包的安装需要Java支持。</p>

<p>Homebrew的安装:</p>

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/mxcl/homebrew/go)"
</code></pre>

<p>或者</p>

<pre><code>ruby -e "$(curl -fsSL https://raw.github.com/Homebrew/homebrew/go/install)" 
</code></pre>

<p>由于Homebrew的安装地址可能变化，请到<a href="https://github.com/Homebrew/homebrew/wiki">官方网站</a>查看最新的安装方法。</p>

<p>Homebrew的使用: Homebrew的可执行命令是brew，其基本使用方法如下（以软件包wget为例）。</p>

<p>查找软件包</p>

<pre><code>brew search wget
</code></pre>

<p>安装软件包</p>

<pre><code>brew install wget
</code></pre>

<p>列出已安装的软件包</p>

<pre><code>brew list
</code></pre>

<p>删除软件包</p>

<pre><code>brew remove wget
</code></pre>

<p>查看软件包信息</p>

<pre><code>brew info wget
</code></pre>

<p>列出软件包的依赖关系</p>

<pre><code>brew deps wget
</code></pre>

<p>更新brew</p>

<pre><code>brew update
</code></pre>

<p>列出过时的软件包（已安装但不是最新版本）</p>

<pre><code>brew outdated
</code></pre>

<p>更新过时的软件包（全部或指定）</p>

<pre><code>brew upgrade 或 brew upgrade wget
</code></pre>

<p>定制自己的软件包（假定软件包名称是bar，来自foo站点）。</p>

<p>首先找到待安装软件的源码下载地址
<a href="http://foo.com/bar-1.0.tgz">http://foo.com/bar-1.0.tgz</a></p>

<p>建立自己的formula
brew create <a href="http://foo.com/bar-1.0.tgz">http://foo.com/bar-1.0.tgz</a></p>

<p>编辑formula，上一步建立成功后，Homebrew会自动打开新建的formula进行编辑，也可用如下命令打开formula进行编辑:</p>

<pre><code>brew edit bar
</code></pre>

<p>Homebrew自动建立的formula已经包含了基本的configure和make install命令，对于大部分软件，不需要进行修改，退出编辑即可。</p>

<p>输入以下命令安装自定义的软件包</p>

<pre><code>brew install bar
</code></pre>

<hr />

<p><strong><a href="http://rubygems.org/">RubyGems</a></strong>是一个包管理框架，提供了ruby社区gem的托管服务，用于方便地下载、安装和使用ruby软件包(gem)，包含了ruby应用或库,要升级到最新的RubyGems，运行：</p>

<pre><code>$ gem update --system
</code></pre>

<p>如果没有安装RubyGems，则需要先下载安装包，然后解压开后运行：</p>

<pre><code>ruby setup.rb
</code></pre>

<hr />

<p><strong>Gem</strong>也是Ruby软件包管理工具。常用的命令有search, install, list,uninstall。如果要看安装的gem文档，一是可以用ri，二是可以gem server启动一个web服务。详细的帮助参见<a href="http://guides.rubygems.org/">RubyGems Guides</a>。</p>

<p>brew和gem不同，brew用于操作系统层面上软件包的安装，而gem只是管理ruby软件</p>

<hr />

<p><strong><a href="https://rvm.io/">RVM</a></strong>（Ruby enVironment Version  ) Manager）是一个命令行工具，提供在多个ruby环境中方便的安装、管理和工作，包括解释器和gem集合。rvm自己的安装通过curl命令执行，如：curl -L <a href="https://get.rvm.io">https://get.rvm.io</a> | bash。</p>

<p>RVM有一个非常灵活的gem管理系统，称为Gem Sets。RVM的’gemsets’管理横跨多个Ruby版本的gems包。</p>

<p>这里所有的命令都是再用户权限下操作的，任何命令最好都不要用sudo.</p>

<p>rvm安装:</p>

<pre><code>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></pre>

<p>设置环境变量:</p>

<pre><code>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
</code></pre>

<p>修改 RVM 的 Ruby 安装源到国内的 淘宝镜像服务器，这样能提高安装速度</p>

<pre><code>sed -i -e 's/ftp\.ruby-lang\.org\/pub\/ruby/ruby\.taobao\.org\/mirrors\/ruby/g' ~/.rvm/config/db
</code></pre>

<p>列出已知的ruby版本</p>

<pre><code>rvm list known
</code></pre>

<p>安装一个ruby版本</p>

<pre><code>rvm install 1.9.3
</code></pre>

<p>这里安装了最新的1.9.3, rvm list known列表里面的都可以拿来安装。</p>

<p>使用一个ruby版本</p>

<pre><code>rvm use 1.9.3
</code></pre>

<p>如果想设置为默认版本，可以这样</p>

<pre><code>rvm use 1.9.3 --default 
</code></pre>

<p>查询已经安装的ruby</p>

<pre><code>rvm list
</code></pre>

<p>卸载一个已安装版本</p>

<pre><code>rvm remove 1.9.2
</code></pre>

<p>rvm连同ruby一起卸载调</p>

<pre><code>rvm implode
</code></pre>

<p>一键将rvm,Ruby连同bundler一起装好</p>

<pre><code>curl -L https://get.rvm.io | bash -s stable --ruby
</code></pre>

<hr />

<p><strong><a href="http://bundler.io/">Bundler</a></strong>为ruby维持一个一致性的环境，跟踪应用代码和所需要的ruby gems，这样一个应用可以有所需要的精确的gems（和版本）安装通过如下命令：</p>

<pre><code>$ gem install bundler
</code></pre>

<hr />

<p>安装的顺序，先安装rvm，之后选择安装一个ruby版本，就可以提供一个完整的ruby运行环境。之后可以安装brew（brew虽然是管理os的，但基于ruby）和gem，分别管理操作系统和ruby的软件包。之后ruby重新编译的时候所依赖的包可以使用brew安装。有了gem之后，bundler只不过就是一个gem，直接通过gem install 即可。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[一步一步教你搭建基于OctoPress+Github的个人博客]]></title>
    <link href="http://jackyzonewen.github.io/blog/2013/10/30/yi-bu-yi-bu-jiao-ni-da-jian-ji-yu-octopress-plus-githubde-ge-ren-bo-ke/"/>
    <updated>2013-10-30T17:47:00+08:00</updated>
    <id>http://jackyzonewen.github.io/blog/2013/10/30/yi-bu-yi-bu-jiao-ni-da-jian-ji-yu-octopress-plus-githubde-ge-ren-bo-ke</id>
    <content type="html"><![CDATA[<hr />

<p><img src="http://beyondvincent.com/images/2013/08/github_page_and-octopress.png" alt="enter image description here" /></p>

<hr />

<h4>最近看了很多博客，然后想尝试着搭建一个属于自己的博客，所以搜集了网上一些教程，然后针对于自己在搭建过程中出  现的问题记录下来，希望大家可以照着教程更方便的搭建属于自己的博客并且熟悉如何来管理自己的博客，如有什么错误之处，还望指正。</h4>

<hr />

<h3>目录</h3>

<ul>
<li>安装Ruby环境</li>
<li>设置Github账号</li>
<li>安装OctoPress</li>
<li>配置</li>
<li>管理博客</li>
<li>同步</li>
<li>Mardown指南</li>
<li>参考</li>
</ul>


<hr />

<h3>安装Ruby环境</h3>

<p>如果你的电脑已经安装Ruby-1.9.3及以上的版本，那么直接跳过这一步骤，OSX现在一般都自带Ruby环境，自带的Ruby环境目录为/usr/local/rvm和/usr/bin/ruby</p>

<p><strong>安装Ruby版本管理RVM:</strong></p>

<pre><code>bash -s stable &lt; &lt;(curl -s https://raw.github.com/wayneeseguin/rvm/master/binscripts/rvm-installer)
</code></pre>

<p><strong>设置环境变量:</strong></p>

<pre><code>echo '[[ -s "$HOME/.rvm/scripts/rvm" ]] &amp;&amp; . "$HOME/.rvm/scripts/rvm" # Load RVM function' &gt;&gt; ~/.bash_profile
source ~/.bash_profile
</code></pre>

<p><strong>安装ruby</strong><br/>
最新的必须使用ruby-1.9.3的环境，否则的话会提示rdiscount2.7.0.3安装失败</p>

<pre><code>rvm install 1.9.3 &amp;&amp; rvm use 1.9.3
rvm rubygems latest
</code></pre>

<hr />

<h3>设置Github账号</h3>

<p>首先你需要有一个Github的账号，Github账号的注册地址是：<a href="https://github.com/signup/free">https://github.com/signup/free</a>。<br/>
然后，你需要新建一个仓库，如果你有自己的域名的话，那么Respository的名称可以随便取，否则的话，将你的Respository的名称设置为:YourAccountName.github.com。</p>

<hr />

<h3>安装Octopress</h3>

<p><strong>这里我认为你是第一次安装Octopress，你可以克隆已经修改的博客源码，我们这里基于Octopress大师的源码，参考<a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a>。</strong></p>

<pre><code>git clone git://github.com/imathis/octopress.git octopress
cd octopress    # If you use RVM, You'll be asked if you trust the .rvmrc file (say yes).
ruby --version  # Should report Ruby 1.9.3
</code></pre>

<p><strong>安装相关依赖项：</strong></p>

<pre><code>gem install bundler
rbenv rehash    # If you use rbenv, rehash to be able to run the bundle command
bundle install
</code></pre>

<p><strong>安装默认的Octopress 主题</strong></p>

<pre><code>rake install
</code></pre>

<hr />

<h3>配置Octopress</h3>

<p>关于<em>config.yml文件中的更多内容，请看这里的内容：<a href="http://octopress.org/docs/configuring/">Configuring Octopress</a><br/>
最好把里面的twitter相关的信息全部删掉，否则在国内加载会很慢；同理，修改定制文件/source/</em>includes/custom/head.html 把google的自定义字体去掉。</p>

<p><strong>配置评论和分享到微博功能：</strong></p>

<ul>
<li>在_config.yml中增加一项： weibo_share: true</li>
<li><p>修改 source/_includes/post/sharing.html ，增加如下代码(注意圆角)：</p>

<p>  ｛% if site.weibo_share %｝<br/>
  ｛% include post/weibo.html %｝<br/>
  ｛% endif %｝</p></li>
<li>增加文件：source/_includes/post/weibo.html</li>
<li>访问 <a href="http://www.jiathis.com/">http://www.jiathis.com/</a> ，获取分享的代码</li>
<li>访问 <a href="http://uyan.cc/">http://uyan.cc/</a> ，获得评论的代码</li>
<li>将上面2步的代码都加入到weibo.html中即可</li>
<li>增加 source/_includes/post/copyright.html，加入以下内容：<br/>
  原创&amp;整理的文章，版权声明:自由转载-非商用&amp;衍生-保持署名 | <a herf="http://creativecommons.org/licenses/by-nc-nd/3.0/deed.zh">Creative Commons BY-NC-ND 3.0</a></li>
<li>修改 source/_layouts/post.html，在标签下增加如下代码:<br/>
<code>&lt;footer&gt;
  &lt;p class="meta"&gt;  
    ……省略代码  
    ｛% include post/categories.html %}  
  &lt;/p&gt;  
  &lt;!-- begin 这里是增加的 --&gt;  
  &lt;p class="meta"&gt;  
    ｛% include post/copyright.html %}  
  &lt;/p&gt;  
  &lt;!-- end 这里是增加的 --&gt;  
  ……省略代码  
&lt;/footer&gt; </code></li>
</ul>


<h3>管理博客</h3>

<p><strong>部署博客到Github</strong></p>

<pre><code>rake setup_github_pages
</code></pre>

<p>系统新增了一个文件夹_deploy，其实这个文件夹本身也是一个git代码库，你可以使用ls -a命令,目录用来存放部署到master分支的内容。期间会要求你输入仓库的url，根据提示，进行输入即可。</p>

<pre><code>rake generate
rake deploy
</code></pre>

<p>生成博客文件，并将生成的博客文件拷贝到_deploy/目录下，然后将这些内容添加到git中，并commit和push到仓库的master分支，如果提示git push成功的话，你可以访问你的博客了，第一次可能需要多等几分钟。</p>

<p>方便我们多台电脑同步写博客，并且更好的管理博客，最后别忘了提交源代码，这里是将源码提交到source分支：</p>

<pre><code>git add .
git commit -a -m 'comment'
git push origin source
</code></pre>

<p><strong>开始写博客</strong></p>

<p>Octopress为我们提供了一些task来创建博文和页面。博文必须存储在source/_posts目录下，并且需要按照Jekyll的命名规范对文章进行命名：YYYY-MM-DD-post-title.markdown。文章的名字会被当做url的一部分，而其中的日期用于对博文的区分和排序。
通过Octopress提供的task可以正确的按照命名规范创建一个博文，并且在博文中会附带常用的一些yaml元数据。创建并部署博文的一个完整过程：</p>

<pre><code>rake new_post["New Post"]
# 进入source_posts目录下面编辑博客内容，期间可以使用rake preview进行预览
rake generate # 重新生成页面
# 保存源文件
git add .
git commit -am "Some comment here." 
git push origin source
# 发布到Github上面
rake deploy
</code></pre>

<hr />

<h3>同步</h3>

<p>你的Github仓库现在有两个分支，分别是master和source。master存储的是博客网站本身，而source存储的是生成博客的源文件。master的内容放在根目录的_deploy文件夹内，当你push源文件时会忽略，它使用的是rake deploy命令来更新的。</p>

<p>首先将博客的源文件clone到本地的myblog文件夹内</p>

<pre><code>git clone -b source git@github.com:username/username.github.com.git myblog
</code></pre>

<p>当需要从另外一台机器来编写博客时，如果机子未配置ruby环境，参考上面教程进行配置，如果未配置过Octopress环境，执行下面操作：</p>

<pre><code>cd myblog  
ruby --version # Should report Ruby 1.9.3  
gem install bundler  
bundle install  
rake install  
</code></pre>

<p>如果已经配置过Octopress环境，那么执行下面的操作:
将博客文件clone到octopress的<em>deploy文件夹内，或者可以重新用rake setup_github_pages初始化</em>deploy目录。</p>

<pre><code>cd myblog
git clone git@github.com:username/username.github.com.git _deploy 
</code></pre>

<p>这一步必须要，否则rake deploy会因为找不到_deploy目录而失败。</p>

<p>如果几台电脑上面都配置好了Otcopress，要在其中一台上写博客需要进行同步，更新source仓库即可，更新master并不是必须的，因为更改源文件之后还是需要rake generate，这个时候会自动进行 master更新。</p>

<pre><code>cd myblog  
git pull origin source  # update the local source branch  
cd ./_deploy  
git pull origin master  # update the local master branch 
</code></pre>

<hr />

<h3>Mardown指南</h3>

<p>介绍markdown的教程很多，提供几个供大家参考:</p>

<ul>
<li><a href="http://lutaf.com/markdown-simple-usage.htm">鲁塔弗：markdown 简明语法</a></li>
<li><a href="http://www.ituring.com.cn/article/23">图灵社区：怎样使用Markdown</a></li>
<li><a href="http://jianshu.io/p/q81RER">简书：献给写作者的 Markdown 新手指南</a></li>
<li><a href="http://wowubuntu.com/markdown/#p">官方文档(中文版)：Markdown 语法说明</a></li>
<li><a href="http://upwith.me/?p=503">用Markdown来书写你的博客</a></li>
</ul>


<p>编辑工具:</p>

<ul>
<li><a href="http://jianshu.io/">简书</a></li>
<li><a href="https://chrome.google.com/webstore/detail/made/oknndfeeopgpibecfjljjfanledpbkog">MaDe (Chrome插件)</a></li>
<li><a href="http://dillinger.io/">dillinger</a></li>
<li><a href="https://stackedit.io/">StackEdit</a></li>
<li><a href="http://www.zybuluo.com/mdeditor">Cmd</a></li>
</ul>


<hr />

<h3>参考</h3>

<ul>
<li><a href="http://blog.devtang.com/blog/2012/02/10/setup-blog-based-on-github/">devtang</a></li>
<li><a href="http://beyondvincent.com/blog/2013/08/03/108-creating-a-github-blog-using-octopress/">破船</a></li>
<li><a href="http://rogerdudler.github.io/git-guide/index.zh.html">Git 简易指南</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[我的博客起来了]]></title>
    <link href="http://jackyzonewen.github.io/blog/2013/10/30/wo-de-bo-ke-qi-lai-liao/"/>
    <updated>2013-10-30T11:27:00+08:00</updated>
    <id>http://jackyzonewen.github.io/blog/2013/10/30/wo-de-bo-ke-qi-lai-liao</id>
    <content type="html"><![CDATA[<h2>Year!折腾了数个小时，成功的构建了自己的“家”了。最近看了很多优秀的blog，所以也想自己来搭建一个这样的平台，希望可以坚持记录自己的生活和工作来沉淀自己，主要还是记录一些技术!</h2>
]]></content>
  </entry>
  
</feed>
