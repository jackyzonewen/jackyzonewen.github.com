---
layout: post
title: "使用git和svn管理android和iOS工程"
date: 2014-01-16 19:32
comments: true
categories: 
---

**背景**

 1. 公司为了保护"知识产权"，对于源码的权限控制比较严格，所以工作大多使用的是SVN版本管理。
 2. 移动开发很多优秀的开源第三方库都是用git管理源代码，并且放在开源的托管网站。
 3. git处理分支管理非常方便，速度比小李飞刀还快··········非常强大。
 4. 管理自己源码，防止硬盘崩溃了或者电脑丢了导致所有源码全部丢失。

---

**免费的git代码托管服务**

 - [Github][1]非常多著名的开源项目
 - [OsChina][2] 国产的，你懂的
 - [Bitbucket][3] 支持Git、Mercurial，免费版有5个用户限制，公有和私有仓库都可以无限制创建，有协作工具(Issue tracker，Wiki)。
 - [Assembla][4]支持SVN、Git、Mercurial，免费版，无用户限制，无仓库限制，存储空间1G，没有协作工具(Issue tracker，Wiki等),考虑先使用 Bitbucket, 当用户不够用的时候再迁移到 Assembla。

---

**使用**

Git的操作流程如下图所示：

![enter image description here][5]

**学习Git的资源**

 - [Git大白话][6] 大白话讲解Git，博客最后也提供了一些资源
 - [A Visual Git Reference][7]图形化Git使用指南。[翻译版本][8]
 - [Git Magic][9] 很通俗的一本介绍Git的书 
 - [Pro Git][10]  全面介绍Git的书，非常详细。 
 - [Git权威指南][11] 适合作为参考手册，[国人][12]写的一本非常好的Git参考书
 - [Git - SVN Crash Course][13] 从SVN过度到Git手册
 - [Github帮助文档][14] 如何创建SSH Key
 - [Git教程][15] 翻译国外的一边简单的Git教程
 - [项目中git管理源码流程][16]
 - [Git flow 开发流程][17]
 - [如何高效利用GitHub][18]
 - [Github中使用Fork + Pull模式][19]


**SVN相关的资源**

 - [SVN使用详解][20]
 - [Mac下面如何配置SVN服务器][21]
 - [SubGit][22]一个智能的将版本控制系统从 SVN 移植到 Git 的工具
 - [svn2git][23]ruby实现的从svn移至到git得工具
 - [Eclipse下配置SVN插件教程][24]
 - [Eclipse下配置EGit插件教程][25]
 


**Git图形客户端**

 - [Source Tree][26] Windows 和 OS X 下免费的 Git 和 Hg 客户端
 - [Tower][27] OSX下面收费的客户端，很清新
 - [Github for mac][28]Github提供的客户端，有windows和OSX版本
 - [GitX][29]OSX下的开源的客户端
 - [GitBox][30]OSX下的客户端

**配置忽略文件**

开发android和iOS项目使用的集成开发环境Xcode和Eclipse默认生成的工程有很多文件都不应该加入到版本控制中，因为这些文件是个人生成的，每台电脑都可能不一样，所以如果加入到版本控制之中，有时候会经常发生冲突，非常恼火。

**Git配置**

在Git的版本控制中，如果需要忽略某些文件，不加入版本控制，有三种方法能达到目的，只不过适用情景不一样:

(1).针对单一工程设置忽略文件，这种方式会让这个工程的所有修改者在克隆代码的同时，也能克隆到过滤规则，而不用自己再写一份，能保证所有修改者应用的都是同一份规则，而不是张三有一套过滤规则，李四又使用另一套过滤规则，个人比较喜欢这种方式，在工程目录下建立.gitignore文件，然后将这个文件也加入版本控制，我一般将这个文件保存我的一个目录中，每次使用cp命令复制到工程目录下面,例如：

    $cd myproject
    $cp ~/back/.gitignore . # 将用户back目录的.gitignore文件拷贝到当前工程目录下

(2).全局设置忽略配置文件，在全局起作用，只要是Git管理的工程，都会忽略不在控制范围内的文件或目录。这种方法对开发者来说，比较省事，只要一次全局配置，不用每次建立工程都要配置一遍过滤规则。但是这不保证其他的开发者在克隆你的代码后，他们那边的规则跟你的是一样的，这就带来了代码提交过程中的各种冲突问题。在用户目录下创建.gitignoreglobal 文件，将要忽略的配置写入该文件:

    vi ~/.gitignoreglobal # 然后写入需要忽略的文件列表


(3). 单个工程设置排除(权限最高，只能对自己本地仓库有作用，其他人没办法通过这种方式来共享忽略规则，除非他人也修改其本地仓库的该文件)，在工程目录下找到.git/info/exclude，不建议使用。

    $cd myproject
    $vi .git/info/exclude # 然后写入需要忽略的文件列表

[我的Git配置][31]忽略文件列表如下:

    # Xcode 
    ############
    .DS_Store
    build/*
    *.pbxuser
    !default.pbxuser
    *.mode1v3
    !default.mode1v3
    *.mode2v3
    !default.mode2v3
    *.perspectivev3
    !default.perspectivev3
    xcuserdata
    profile
    *.moved-aside
    DerivedData
    .idea/
    *.hmap
    *.xccheckout
    
    #CocoaPods
    ##########
    Pods
    
    # Textmate -
    ############
    *.tm_build_errors
    
    # Subversion
    ############
    .svn
    
    # Android
    ############
    # built application files
    *.apk
    *.ap_
    
    # files for the dex VM
    *.dex
    
    # Java class files
    *.class
    
    # generated files
    bin/
    gen/
    
    # Local configuration file (sdk path, etc)
    local.properties
    
    # Eclipse project files
    .classpath
    .project
    
    # Proguard folder generated by Eclipse
    proguard/
    
    # Intellij project files
    *.iml
    *.ipr
    *.iws
    .idea/

**SVN配置**

同理svn也需要设置忽略列表，svn全局忽略配置文件位于用户根目录下:  ~/.subversion/config，如果不存在config文件，新建一个config文件，然后再config文件设置中加入忽略文件列表，[我的svn配置][32]忽略文件列表如下：

    global-ignores = *~.nib *.so *.pbxuser *.mode *.perspective* *.o *.lo *.la #*# .*.rej *.rej .*~ *~ .#* .DS_Store *.modee1v3 build xcuserdata/* *.xcuserdatad *.xcuserstate *.xccheckout .gitignore .git
    enable-auto-props = yes
    *.mode* = svn:mime-type=text/X-xcode
    *.pbxuser = svn:mime-type=text/X-xcode
    *.perspective* = svn:mime-type=text/X-xcode
    *.pbxproj = svn:mime-type=text/X-xcode
    *.xccheckout = svn:mime-type=text/X-xcode

ps：这里注意，如果你需要设置的忽略的某些文件已经加入了版本控制，这个时候你添加.gitignore文件或者配置svn的config文件，是不起作用的，这个时候你需要使用git rm命令或者svn rm命令将该文件剔除版本管理，提交后忽略文件列表设置才生效。

**如何同时使用svn和git来管理项目?**

我目前的项目是这么处理的:

 1. 先从公司的svn服务器上面拉出项目，设置svn的忽略文件列表(上面已经列出)，我加入了git相关的，例如.gitignore、.git等。
 2. 进入项目根目录，使用git init命令初始化git仓库，然后加入.gitignore配置文件。(这个时候你使用svn
    status发现svn是未检测到有变化的) 通过git add命令和git commit命令提交版本。
 3. 然后新建dev或者feature分支来进行开发。
 4. 如果需要提交代码到svn，切回master分支，将dev分支或者feature分支合并到master分支，然后提交svn。
 5. 提交完成后再切回到你的工作分支进行工作，如此反复····

所有的小的改动都是在git中进行管理，或者新的想法新建一个分支去实现，完成一个功能或者修复一个bug，然后提交到svn中。


  [1]: https://github.com/
  [2]: http://git.oschina.net/
  [3]: https://bitbucket.org/
  [4]: http://www.assembla.com/
  [5]: http://i.stack.imgur.com/MgaV9.png
  [6]: http://rogerdudler.github.io/git-guide/index.zh.html
  [7]: http://marklodato.github.io/visual-git-guide/index-en.html
  [8]: http://marklodato.github.io/visual-git-guide/index-zh-cn.html
  [9]: http://www-cs-students.stanford.edu/~blynn/gitmagic/intl/zh_cn/
  [10]: http://git-scm.com/book/zh
  [11]: http://www.worldhello.net/
  [12]: http://www.worldhello.net/
  [13]: http://git.or.cz/course/svn.html
  [14]: https://help.github.com/articles/generating-ssh-keys
  [15]: http://www.cnblogs.com/zhangjing230/archive/2012/05/09/2489745.html
  [16]: http://danielxu.github.io/blog/2013/02/18/git-simple-workflow/
  [17]: http://ihower.tw/blog/archives/5140
  [18]: http://www.yangzhiping.com/tech/github.html
  [19]: http://www.worldhello.net/gotgithub/04-work-with-others/010-fork-and-pull.html
  [20]: http://www.cocoachina.com/bbs/read.php?tid=112069
  [21]: http://www.cnblogs.com/onlyfu/archive/2012/05/08/2489814.html
  [22]: http://subgit.com/documentation/index.html
  [23]: https://github.com/nirvdrum/svn2git
  [24]: http://www.cnblogs.com/chencidi/articles/1904781.html
  [25]: http://blog.csdn.net/luckarecs/article/details/7427605
  [26]: http://sourcetreeapp.com/
  [27]: http://www.git-tower.com/
  [28]: http://mac.github.com/
  [29]: http://gitx.laullon.com/
  [30]: https://itunes.apple.com/gb/app/gitbox/id403388357?mt=12
  [31]: https://gist.github.com/jackyzonewen/7262190
  [32]: https://gist.github.com/jackyzonewen/8119689/edit

